{"version":3,"sources":["components/SidebarData.jsx","components/SubMenu.jsx","components/Sidebar.jsx","pages/About.tsx","pages/Account.tsx","pages/Cpu4.tsx","pages/Home.tsx","pages/Limitlesswax.tsx","pages/Team.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SidebarData","title","path","icon","iconClosed","iconOpened","SidebarLink","styled","Link","SidebarLabel","span","DropdownLink","SubMenu","item","useState","subnav","setSubnav","to","onClick","subNav","Provider","value","color","map","index","Login","button","Logout","Nav","div","NavIcon","SidebarNav","nav","sidebar","SidebarWrap","Sidebar","ual","setSidebar","showSidebar","activeUser","logout","accountName","showModal","About","Account","demoTransactionUserWax","realCost","multiplier","max_cpu_usage_ms","max_net_usage_words","actions","account","name","data","user","info","authorization","actor","permission","from","quantity","toFixed","memo","payer","receiver","bytes","user_wax","a","rpc","get_table_rows","json","code","scope","table","limit","reverse","show_payer","parseFloat","rows","cost","console","log","signTransaction","broadcast","blocksBehind","expireSeconds","response","JSON","stringify","demoTransactionContractWax","contract_wax","demoTransactionUserToken","tokenContract","user_token","symbol","symbol_string","symbol_decimals","contract","lower_bound","upper_bound","price","demoTransactionContractToken","contract_token","demoTransactionExtraAction","extra_action","activeAuthenticator","wax","style","display","justifyContent","alignItems","height","Cpu4","transactionFreeCPU","username","sign","r","alert","transactionId","error","Home","Limitlesswax","Team","App","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","myChain","chainId","rpcEndpoints","protocol","host","port","anchor","Anchor","appName","Wax","MyUALConsumer","withUAL","ReactDOM","render","StrictMode","chains","authenticators","document","getElementById"],"mappings":"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","file":"static/js/main.459564e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as FaIcons from 'react-icons/fa';\r\nimport * as IoIcons from 'react-icons/io';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BsIcons from 'react-icons/bs';\r\n\r\nexport const SidebarData = [\r\n  {\r\n    title: 'Account',\r\n    path: '/account',\r\n    icon: <FaIcons.FaUserAlt />,\r\n    iconClosed: <RiIcons.RiArrowDownSFill />,\r\n    iconOpened: <RiIcons.RiArrowUpSFill />,\r\n  },\r\n  {\r\n    title: 'Cpu4',\r\n    path: '/cpu4',\r\n    icon: <BsIcons.BsCpu />,\r\n    iconClosed: <RiIcons.RiArrowDownSFill />,\r\n    iconOpened: <RiIcons.RiArrowUpSFill />,\r\n\r\n  },\r\n  {\r\n    title: 'Limitlesswax',\r\n    path: '/limitlesswax',\r\n    icon: <FaIcons.FaDollarSign />\r\n  },\r\n  {\r\n    title: 'Team',\r\n    path: '/team',\r\n    icon: <IoIcons.IoMdPeople />\r\n  },\r\n  {\r\n    title: 'About',\r\n    path: '/about',\r\n    icon: <FaIcons.FaInfo/>\r\n  }\r\n];\r\n\r\n/*\r\n{\r\n    title: 'Messages',\r\n    path: '/messages',\r\n    icon: <FaIcons.FaEnvelopeOpenText />,\r\n\r\n    iconClosed: <RiIcons.RiArrowDownSFill />,\r\n    iconOpened: <RiIcons.RiArrowUpSFill />,\r\n\r\n    subNav: [\r\n      {\r\n        title: 'Message 1',\r\n        path: '/messages/message1',\r\n        icon: <IoIcons.IoIosPaper />\r\n      },\r\n      {\r\n        title: 'Message 2',\r\n        path: '/messages/message2',\r\n        icon: <IoIcons.IoIosPaper />\r\n      }\r\n    ]\r\n  },\r\n*/","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { IconContext } from \"react-icons\";\r\n\r\nconst SidebarLink = styled(Link)`\r\n  display: flex;\r\n  color: #FFF;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px;\r\n  list-style: none;\r\n  height: 60px;\r\n  text-decoration: none;\r\n  font-size: 18px;\r\n  &:hover {\r\n    background: #252831;\r\n    border-left: 4px solid #632ce4;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst SidebarLabel = styled.span`\r\n  margin-left: 16px;\r\n`;\r\n\r\nconst DropdownLink = styled(Link)`\r\n  background: #414757;\r\n  height: 60px;\r\n  padding-left: 3rem;\r\n  display: flex;\r\n  align-items: center;\r\n  text-decoration: none;\r\n  color: #f5f5f5;\r\n  font-size: 18px;\r\n  &:hover {\r\n    background: #632ce4;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst SubMenu = ({ item }) => {\r\n  const [subnav, setSubnav] = useState(false);\r\n\r\n  const showSubnav = () => setSubnav(!subnav);\r\n\r\n  return (\r\n    <>\r\n      <SidebarLink to={item.path} onClick={item.subNav && showSubnav}>\r\n        <IconContext.Provider value={{color: '#EF476F'}}>\r\n          <div>\r\n            {item.icon}\r\n            <SidebarLabel>{item.title}</SidebarLabel>\r\n          </div>\r\n        </IconContext.Provider>\r\n        <div>\r\n          {item.subNav && subnav\r\n            ? item.iconOpened\r\n            : item.subNav\r\n            ? item.iconClosed\r\n            : null}\r\n        </div>\r\n      </SidebarLink>\r\n      {subnav &&\r\n        item.subNav.map((item, index) => {\r\n          return (\r\n            <DropdownLink to={item.path} key={index}>\r\n              {item.icon}\r\n              <SidebarLabel>{item.title}</SidebarLabel>\r\n            </DropdownLink>\r\n          );\r\n        })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SubMenu;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport * as FaIcons from 'react-icons/fa';\r\nimport * as AiIcons from 'react-icons/ai';\r\nimport { SidebarData } from './SidebarData';\r\nimport SubMenu from './SubMenu';\r\nimport { IconContext } from 'react-icons/lib';\r\n\r\n\r\nexport const Login = styled.button`\r\n  border-radius: 4px;\r\n  background: #EF476F;\r\n  padding: 20px 70px;\r\n  color: #fff;\r\n  outline: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease-in-out;\r\n  text-decoration: none;\r\n  margin-left: 85%;\r\n  font-size: 18px;\r\n\r\n  &:hover {\r\n    transition: all 0.2s ease-in-out;\r\n    background: #fff;\r\n    color: #010606;\r\n  }\r\n`;\r\nexport const Logout = styled.button`\r\n  border-radius: 4px;\r\n  background: #EF476F;\r\n  padding: 20px 50px;\r\n  color: #fff;\r\n  outline: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease-in-out;\r\n  text-decoration: none;\r\n  margin-left: 85%;\r\n  font-size: 18px;\r\n\r\n  &:hover {\r\n    transition: all 0.2s ease-in-out;\r\n    background: #fff;\r\n    color: #010606;\r\n  }\r\n\r\n`;\r\n\r\nconst Nav = styled.div`\r\n  background: #121212;\r\n  height: 80px;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n`;\r\n\r\nconst NavIcon = styled(Link)`\r\n  margin-left: 2rem;\r\n  font-size: 2rem;\r\n  height: 80px;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n`;\r\n\r\nconst SidebarNav = styled.nav`\r\n  background: #121212;\r\n  width: 250px;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  position: fixed;\r\n  top: 0;\r\n  left: ${({ sidebar }) => (sidebar ? '0' : '-100%')};\r\n  transition: 350ms;\r\n  z-index: 10;\r\n`;\r\n\r\nconst SidebarWrap = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\n\r\nconst Sidebar = ({ ual }) => {\r\n  const [sidebar, setSidebar] = useState(false);\r\n\r\n  const openLoginModal = () => {\r\n    if (!ual.activeUser) {\r\n      ual.showModal();\r\n    }\r\n  };\r\n\r\n  const showSidebar = () => setSidebar(!sidebar);\r\n\r\n  return (\r\n    <>\r\n      <IconContext.Provider value={{ color: '#fff' }}>\r\n        <Nav>\r\n          <NavIcon to='#'>\r\n            <FaIcons.FaBars onClick={showSidebar} />\r\n          </NavIcon>\r\n          {(!ual.activeUser) ? (\r\n              <Login onClick={openLoginModal}>Login</Login>\r\n            ) : (\r\n              <Logout onClick={ual.logout}>{ual.activeUser.accountName}</Logout>\r\n            )}\r\n          \r\n        </Nav>\r\n        <SidebarNav sidebar={sidebar}>\r\n          <SidebarWrap>\r\n            <NavIcon to='#'>\r\n              <AiIcons.AiOutlineClose onClick={showSidebar} />\r\n            </NavIcon>\r\n            {SidebarData.map((item, index) => {\r\n              return <SubMenu item={item} key={index} />;\r\n            })}\r\n          </SidebarWrap>\r\n        </SidebarNav>\r\n      </IconContext.Provider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sidebar;","import React from 'react';\r\n\r\nfunction About() {\r\n  return <div>About</div>;\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport { JsonRpc } from \"eosjs\";\r\nimport { Transaction, Action } from \"../types\";\r\n\r\n//@ts-ignore\r\nconst Account = ({ ual }) => {\r\n  const demoTransactionUserWax = (\r\n    realCost: number,\r\n    multiplier: number\r\n  ): Transaction => {\r\n    return {\r\n      max_cpu_usage_ms: multiplier,\r\n      max_net_usage_words: multiplier * 1000,\r\n      actions: [\r\n        {\r\n          account: \"limitlesswax\",\r\n          name: \"paycpu\",\r\n          data: {\r\n            user: ual.activeUser.accountName,\r\n            info: multiplier + \" ms max\",\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: \"limitlesswax\",\r\n              permission: \"cosign\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          account: \"eosio.token\",\r\n          name: \"transfer\",\r\n          data: {\r\n            from: ual.activeUser.accountName,\r\n            to: \"limitlesscpu\",\r\n            quantity: realCost.toFixed(8) + \" WAX\",\r\n            memo: \"Limitlesswax CPU Payment\",\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: ual.activeUser.accountName,\r\n              permission: \"active\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          account: \"eosio\",\r\n          name: \"buyrambytes\",\r\n          data: {\r\n            payer: ual.activeUser.accountName,\r\n            receiver: ual.activeUser.accountName,\r\n            bytes: 100,\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: ual.activeUser.accountName,\r\n              permission: \"active\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  };\r\n  const user_wax = async () => {\r\n    const multiplier = 1;\r\n    var realCost = 0.01;\r\n    try {\r\n      const table = await ual.activeUser.rpc.get_table_rows({\r\n        json: true, // Get the response as json\r\n        code: \"limitlesswax\", // Contract that we target\r\n        scope: \"limitlesswax\", // Account that owns the data\r\n        table: \"config\", // Table name\r\n        limit: 1, // Maximum number of rows that we want to get\r\n        reverse: false, // Optional: Get reversed data\r\n        show_payer: false, // Optional: Show ram payer\r\n      });\r\n\r\n      // console.log(table.rows[0]);\r\n      realCost = parseFloat(table.rows[0].cost) * multiplier;\r\n      // console.log(realCost);\r\n\r\n      console.log(demoTransactionUserWax(realCost, multiplier));\r\n      const response = await ual.activeUser.signTransaction(\r\n        demoTransactionUserWax(realCost, multiplier),\r\n        {\r\n          broadcast: true,\r\n          blocksBehind: 3,\r\n          expireSeconds: 60,\r\n        }\r\n      );\r\n      console.log(\"Sucess\", response);\r\n    } catch (e) {\r\n      console.log(\"Error\", e);\r\n      console.log(\"JSON\", JSON.stringify(e));\r\n    }\r\n  };\r\n\r\n  const demoTransactionContractWax = (\r\n    realCost: number,\r\n    multiplier: number\r\n  ): Transaction => {\r\n    return {\r\n      max_cpu_usage_ms: multiplier,\r\n      max_net_usage_words: multiplier * 1000,\r\n      actions: [\r\n        {\r\n          account: \"limitlesswax\",\r\n          name: \"paycpu\",\r\n          data: {\r\n            user: ual.activeUser.accountName,\r\n            info: multiplier + \" ms max\",\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: \"limitlesswax\",\r\n              permission: \"cosign\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          account: \"eosio.token\",\r\n          name: \"transfer\",\r\n          data: {\r\n            from: \"limitlessbnk\",\r\n            to: \"limitlesscpu\",\r\n            quantity: realCost.toFixed(8) + \" WAX\",\r\n            memo: \"Limitlesswax CPU Payment\",\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: \"limitlesswax\",\r\n              permission: \"cosign\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          account: \"eosio\",\r\n          name: \"buyrambytes\",\r\n          data: {\r\n            payer: ual.activeUser.accountName,\r\n            receiver: ual.activeUser.accountName,\r\n            bytes: 100,\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: ual.activeUser.accountName,\r\n              permission: \"active\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  };\r\n  const contract_wax = async () => {\r\n    const multiplier = 1;\r\n    var realCost = 0.01;\r\n    try {\r\n      const table = await ual.activeUser.rpc.get_table_rows({\r\n        json: true, // Get the response as json\r\n        code: \"limitlesswax\", // Contract that we target\r\n        scope: \"limitlesswax\", // Account that owns the data\r\n        table: \"config\", // Table name\r\n        limit: 1, // Maximum number of rows that we want to get\r\n        reverse: false, // Optional: Get reversed data\r\n        show_payer: false, // Optional: Show ram payer\r\n      });\r\n\r\n      // console.log(table.rows[0]);\r\n      realCost = parseFloat(table.rows[0].cost) * multiplier;\r\n      // console.log(realCost);\r\n\r\n      console.log(demoTransactionContractWax(realCost, multiplier));\r\n      const response = await ual.activeUser.signTransaction(\r\n        demoTransactionContractWax(realCost, multiplier),\r\n        {\r\n          broadcast: true,\r\n          blocksBehind: 3,\r\n          expireSeconds: 60,\r\n        }\r\n      );\r\n      console.log(\"Sucess\", response);\r\n    } catch (e) {\r\n      console.log(\"Error\", e);\r\n      console.log(\"JSON\", JSON.stringify(e));\r\n    }\r\n  };\r\n\r\n  const demoTransactionUserToken = (\r\n    realCost: string,\r\n    multiplier: number,\r\n    tokenContract: string\r\n  ): Transaction => {\r\n    return {\r\n      max_cpu_usage_ms: multiplier,\r\n      max_net_usage_words: multiplier * 1000,\r\n      actions: [\r\n        {\r\n          account: \"limitlesswax\",\r\n          name: \"paycpu\",\r\n          data: {\r\n            user: ual.activeUser.accountName,\r\n            info: multiplier + \" ms max\",\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: \"limitlesswax\",\r\n              permission: \"cosign\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          account: tokenContract,\r\n          name: \"transfer\",\r\n          data: {\r\n            from: ual.activeUser.accountName,\r\n            to: \"limitlesscvt\",\r\n            quantity: realCost,\r\n            memo: \"Limitlesswax CPU Payment\",\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: ual.activeUser.accountName,\r\n              permission: \"active\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          account: \"eosio\",\r\n          name: \"buyrambytes\",\r\n          data: {\r\n            payer: ual.activeUser.accountName,\r\n            receiver: ual.activeUser.accountName,\r\n            bytes: 100,\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: ual.activeUser.accountName,\r\n              permission: \"active\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  };\r\n  const user_token = async () => {\r\n    const multiplier = 1.0;\r\n    var realCost = 0.01;\r\n    var symbol = \"0,SNAKOIL\";\r\n    var symbol_string = \" SNAKOIL\";\r\n    var symbol_decimals = 0;\r\n    var contract = \"novarallytok\";\r\n    try {\r\n      const table = await ual.activeUser.rpc.get_table_rows({\r\n        json: true, // Get the response as json\r\n        code: \"limitlesscvt\", // Contract that we target\r\n        scope: \"limitlesscvt\", // Account that owns the data\r\n        table: \"token\", // Table name\r\n        lower_bound: symbol,\r\n        upper_bound: symbol,\r\n        limit: 1, // Maximum number of rows that we want to get\r\n        reverse: false, // Optional: Get reversed data\r\n        show_payer: false, // Optional: Show ram payer\r\n      });\r\n\r\n      console.log(table.rows[0]);\r\n      realCost = parseFloat(table.rows[0].price) * multiplier;\r\n      console.log(realCost);\r\n      console.log(realCost.toFixed(symbol_decimals) + symbol_string);\r\n\r\n      console.log(\r\n        demoTransactionUserToken(\r\n          realCost.toFixed(symbol_decimals) + symbol_string,\r\n          multiplier,\r\n          contract\r\n        )\r\n      );\r\n      const response = await ual.activeUser.signTransaction(\r\n        demoTransactionUserToken(\r\n          realCost.toFixed(symbol_decimals) + symbol_string,\r\n          multiplier,\r\n          contract\r\n        ),\r\n        {\r\n          broadcast: true,\r\n          blocksBehind: 3,\r\n          expireSeconds: 60,\r\n        }\r\n      );\r\n      console.log(\"Sucess\", response);\r\n    } catch (e) {\r\n      console.log(\"Error\", e);\r\n      console.log(\"JSON\", JSON.stringify(e));\r\n    }\r\n  };\r\n\r\n  const demoTransactionContractToken = (\r\n    realCost: string,\r\n    multiplier: number,\r\n    tokenContract: string\r\n  ): Transaction => {\r\n    return {\r\n      max_cpu_usage_ms: multiplier,\r\n      max_net_usage_words: multiplier * 1000,\r\n      actions: [\r\n        {\r\n          account: \"limitlesswax\",\r\n          name: \"paycpu\",\r\n          data: {\r\n            user: ual.activeUser.accountName,\r\n            info: multiplier + \" ms max\",\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: \"limitlesswax\",\r\n              permission: \"cosign\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          account: tokenContract,\r\n          name: \"transfer\",\r\n          data: {\r\n            from: \"limitlessbnk\",\r\n            to: \"limitlesscvt\",\r\n            quantity: realCost,\r\n            memo: \"Limitlesswax CPU Payment\",\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: \"limitlesswax\",\r\n              permission: \"cosign\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          account: \"eosio\",\r\n          name: \"buyrambytes\",\r\n          data: {\r\n            payer: ual.activeUser.accountName,\r\n            receiver: ual.activeUser.accountName,\r\n            bytes: 100,\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: ual.activeUser.accountName,\r\n              permission: \"active\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  };\r\n  const contract_token = async () => {\r\n    const multiplier = 1;\r\n    var realCost = 0.01;\r\n    var symbol = \"0,SNAKOIL\";\r\n    var symbol_string = \" SNAKOIL\";\r\n    var symbol_decimals = 0;\r\n    var contract = \"novarallytok\";\r\n    try {\r\n      const table = await ual.activeUser.rpc.get_table_rows({\r\n        json: true, // Get the response as json\r\n        code: \"limitlesscvt\", // Contract that we target\r\n        scope: \"limitlesscvt\", // Account that owns the data\r\n        table: \"token\", // Table name\r\n        lower_bound: symbol,\r\n        upper_bound: symbol,\r\n        limit: 1, // Maximum number of rows that we want to get\r\n        reverse: false, // Optional: Get reversed data\r\n        show_payer: false, // Optional: Show ram payer\r\n      });\r\n\r\n      // console.log(table.rows[0]);\r\n      realCost = parseFloat(table.rows[0].price) * multiplier;\r\n      // console.log(realCost);\r\n\r\n      console.log(\r\n        demoTransactionContractToken(\r\n          realCost.toFixed(symbol_decimals) + symbol_string,\r\n          multiplier,\r\n          contract\r\n        )\r\n      );\r\n      const response = await ual.activeUser.signTransaction(\r\n        demoTransactionContractToken(\r\n          realCost.toFixed(symbol_decimals) + symbol_string,\r\n          multiplier,\r\n          contract\r\n        ),\r\n        {\r\n          broadcast: true,\r\n          blocksBehind: 3,\r\n          expireSeconds: 60,\r\n        }\r\n      );\r\n      console.log(\"Sucess\", response);\r\n    } catch (e) {\r\n      console.log(\"Error\", e);\r\n      console.log(\"JSON\", JSON.stringify(e));\r\n    }\r\n  };\r\n\r\n  const demoTransactionExtraAction = (\r\n    realCost: string,\r\n    multiplier: number,\r\n    tokenContract: string\r\n  ): Transaction => {\r\n    return {\r\n      max_cpu_usage_ms: multiplier,\r\n      max_net_usage_words: multiplier * 1000,\r\n      actions: [\r\n        {\r\n          account: \"limitlesswax\",\r\n          name: \"paycpu\",\r\n          data: {\r\n            user: ual.activeUser.accountName,\r\n            info: multiplier + \" ms max\",\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: \"limitlesswax\",\r\n              permission: \"cosign\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          account: \"somecontract\",\r\n          name: \"something\",\r\n          data: {},\r\n          authorization: [\r\n            {\r\n              actor: ual.activeUser.accountName,\r\n              permission: \"active\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          account: tokenContract,\r\n          name: \"transfer\",\r\n          data: {\r\n            from: \"limitlessbnk\",\r\n            to: \"limitlesscvt\",\r\n            quantity: realCost,\r\n            memo: \"Limitlesswax CPU Payment\",\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: \"limitlesswax\",\r\n              permission: \"cosign\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          account: \"eosio\",\r\n          name: \"buyrambytes\",\r\n          data: {\r\n            payer: ual.activeUser.accountName,\r\n            receiver: ual.activeUser.accountName,\r\n            bytes: 100,\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: ual.activeUser.accountName,\r\n              permission: \"active\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  };\r\n  const extra_action = async () => {\r\n    const multiplier = 1;\r\n    var realCost = 0.01;\r\n    var symbol = \"0,SNAKOIL\";\r\n    var symbol_string = \" SNAKOIL\";\r\n    var symbol_decimals = 0;\r\n    var contract = \"novarallytok\";\r\n    try {\r\n      console.log(\"ual: \", ual);\r\n      if (ual.activeAuthenticator.wax) {\r\n        console.log(\"Yes a wcw user\");\r\n      } else {\r\n        console.log(\"Not a wcw user\");\r\n      }\r\n      const table = await ual.activeUser.rpc.get_table_rows({\r\n        json: true, // Get the response as json\r\n        code: \"limitlesscvt\", // Contract that we target\r\n        scope: \"limitlesscvt\", // Account that owns the data\r\n        table: \"token\", // Table name\r\n        lower_bound: symbol,\r\n        upper_bound: symbol,\r\n        limit: 1, // Maximum number of rows that we want to get\r\n        reverse: false, // Optional: Get reversed data\r\n        show_payer: false, // Optional: Show ram payer\r\n      });\r\n\r\n      // console.log(table.rows[0]);\r\n      realCost = parseFloat(table.rows[0].price) * multiplier;\r\n      // console.log(realCost);\r\n\r\n      console.log(\r\n        demoTransactionExtraAction(\r\n          realCost.toFixed(symbol_decimals) + symbol_string,\r\n          multiplier,\r\n          contract\r\n        )\r\n      );\r\n      const response = await ual.activeUser.signTransaction(\r\n        demoTransactionExtraAction(\r\n          realCost.toFixed(symbol_decimals) + symbol_string,\r\n          multiplier,\r\n          contract\r\n        ),\r\n        {\r\n          broadcast: true,\r\n          blocksBehind: 3,\r\n          expireSeconds: 60,\r\n        }\r\n      );\r\n      console.log(\"Sucess\", response);\r\n      console.log(\"ual: \", ual);\r\n    } catch (e) {\r\n      console.log(\"Error\", e);\r\n      console.log(\"JSON\", JSON.stringify(e));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"90vh\",\r\n      }}\r\n    >\r\n      {!ual.activeUser ? (\r\n        <h1>\"Not logged in\"</h1>\r\n      ) : (\r\n        <h1>{ual.activeUser.accountName}</h1>\r\n      )}\r\n      <button onClick={user_wax}>User Wax</button>\r\n      <button onClick={contract_wax}>Contract Wax</button>\r\n      <button onClick={user_token}>User Snakoil</button>\r\n      <button onClick={contract_token}>Contract Token</button>\r\n      <button onClick={extra_action}>Extra Action</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Account;\r\n","import React from 'react';\r\n//@ts-expect-error\r\nconst Cpu4 = ({ual}) =>{\r\n\r\n  const transactionFreeCPU = async () => {\r\n    var actions = {};\r\n      console.log(\"Yes a wcw user\");\r\n      actions = {\r\n        max_cpu_usage_ms: 5,\r\n        max_net_usage_words: 5000,\r\n        actions: [\r\n          {\r\n            account: \"limitlesswax\",\r\n            name: \"paycpu\",\r\n            data: {\r\n              user: ual.activeUser.accountName,\r\n              info: \"5 ms max\",\r\n            },\r\n            authorization: [\r\n              {\r\n                actor: \"limitlesswax\",\r\n                permission: \"cosign\",\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            account: \"free.cpu4\",\r\n            name: \"getcpu\",\r\n            data: {\r\n              username: ual.activeUser.accountName,\r\n            },\r\n            authorization: [\r\n              {\r\n                actor: ual.activeUser.accountName,\r\n                permission: \"active\",\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      };\r\n    \r\n    try {\r\n      const r = await ual.activeUser.signTransaction(actions, {\r\n        blocksBehind: 5,\r\n        expireSeconds: 300,\r\n        broadcast: true,\r\n        sign: true,\r\n      });\r\n      console.log(r);\r\n      alert(\"Transaction ID: \" + r.transactionId);\r\n    } catch (e) {\r\n      console.error(e);\r\n      // process.exit();\r\n      alert(e);\r\n      console.log(JSON.stringify(e));\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '90vh'\r\n      }}\r\n    >\r\n      {(!ual.activeUser) ? (\r\n        <h1>\"Not logged in\"</h1>\r\n      ) : (\r\n        <h1>{ual.activeUser.accountName}<button onClick={transactionFreeCPU}>Test</button></h1>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n    \r\n\r\n}\r\n\r\nexport default Cpu4;\r\n","import React from 'react';\r\n\r\n//@ts-ignore\r\nconst Home = ({ ual}) => {\r\n  \r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '90vh'\r\n      }}\r\n    >\r\n      {(!ual.activeUser) ? (\r\n        <h1>\"Not logged in\"</h1>\r\n      ) : (\r\n        <h1>{ual.activeUser.accountName}</h1>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nfunction Limitlesswax() {\r\n  return <div>Limitlesswax</div>;\r\n}\r\n\r\nexport default Limitlesswax;\r\n","import React from 'react';\r\n\r\nfunction Team() {\r\n  return <div>Team</div>;\r\n}\r\n\r\nexport default Team;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route} from 'react-router-dom';\r\nimport './App.css';\r\nimport Sidebar from './components/Sidebar';\r\nimport About from './pages/About';\r\nimport Account from './pages/Account';\r\nimport Cpu4 from './pages/Cpu4';\r\nimport Home from './pages/Home';\r\nimport Limitlesswax from './pages/Limitlesswax'\r\nimport Team from './pages/Team';\r\n//@ts-ignore\r\nfunction App({ ual }) {\r\n  return (\r\n    <Router>\r\n      <Sidebar ual={ual}/>\r\n      <Routes>\r\n        <Route path='/' element={<Home ual = { ual} />} /> \r\n        <Route path='/about' element={<About />} /> \r\n        <Route path='/account' element={<Account ual = { ual }/>} /> \r\n        <Route path='/cpu4' element={<Cpu4 ual= { ual }/>} /> \r\n        <Route path='/limitlesswax' element={<Limitlesswax />} /> \r\n        <Route path='/team' element={<Team />} /> \r\n        <Route path='*' element={<Home ual = { ual }/>} /> \r\n      </Routes> \r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\n//@ts-ignore\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n// @ts-ignore\r\nimport { UALProvider, withUAL } from \"ual-reactjs-renderer\";\r\nimport { Anchor } from \"ual-anchor\";\r\n// import { Anchor } from \"../node_modules/@deraxyna/ual-anchor/node_modules/eosjs/dist\";\r\n\r\nimport { Wax } from \"../node_modules/@deraxyna/ual-wax/dist\";\r\n\r\nconst myChain = {\r\n  chainId: \"1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4\",\r\n  rpcEndpoints: [\r\n    {\r\n      protocol: \"https\",\r\n      host: \"wax.greymass.com\",\r\n      port: \"443\",\r\n    },\r\n  ],\r\n};\r\n\r\n// @ts-ignore\r\nconst anchor = new Anchor([myChain], { appName: \"cpu4\" });\r\n// @ts-ignore\r\nconst wax = new Wax([myChain], { appName: \"cpu4\" });\r\n\r\nconst MyUALConsumer = withUAL(App);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <UALProvider\r\n      chains={[myChain]}\r\n      authenticators={[wax, anchor]}\r\n      appName={\"cpu4\"}\r\n    >\r\n      <MyUALConsumer />\r\n    </UALProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}